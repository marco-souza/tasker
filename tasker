#! /usr/bin/env node

// Imports
let tasker = require(`commander`),
    I18n = require(`./assets/utils`).I18n,
    Logger = require(`./assets/utils`).Logger,
    _ = require(`lodash`),
    chalk = require(`chalk`),
    moment = require(`moment`),
    crypto = require(`crypto`),
    fs = require(`fs`);

// Initial Definitions
moment.locale(`pt-br`);
let file = `${__dirname}/data/tasks.json`,
    fileDone = `${__dirname}/data/tasks_done.json`,
    i18n = new I18n(`pt-br`);


// Parser Functions
function getTaskObj(val) {
    let taskInfo =  val.split(`,`),
        taskObj = {};

    taskObj.type = `default`;

    if (taskInfo.length === 1) {
        cmd = taskInfo[0].split(`:`);
        taskObj.message = (cmd.length === 1) ? taskInfo[0] : cmd[1];
    }else {
        for (i of taskInfo) {
            let data = i.split(`:`);
            switch(data[0]) {
                case `d`:
                    taskObj[`date`] = moment(data[1]).format(`LL`);
                    break;
                case `e`:
                    taskObj[`timebox`] = data[1];
                    break;
                case `m`:
                    taskObj[`message`] = data[1];
                    break;
                case `t`:
                    taskObj[`type`] = data[1];
                    break;
            }
        }
    }

    // Generate hash for id
    sha1 = crypto.createHash("sha1");
    sha1.update(taskObj.type + taskObj.message);

    taskObj.id = sha1.digest("HEX");

    return taskObj;
}


// Definition CLI commands
tasker
    .version(`0.0.1`)
    .option(`-c, --create [obj]`, `Create a task`, getTaskObj)
    .option(`-l, --list [type]`, `List all tasks`)
    .option(`-d, --done [hash]`, `Complete or delete a task`)
    .parse(process.argv);



// Create Task
if(tasker.create) {
    let logger = new Logger("createTask");
    if (tasker.create != true) {
        let task = tasker.create, tasks = [];

        // If file exists, load file.
        if(fs.existsSync(file)) {
            tasks = JSON.parse(fs.readFileSync(file, `utf8`));
        }

        // Check if task is repeated
        if (_.find(tasks, v => v.id === task.id)) {
            logger.info(i18n.translate(`_TASK_EXISTS_`));
            return;
        }

        tasks.push(task);

        // Write on file
        fs.writeFile(file, JSON.stringify(tasks, undefined, 4), console.log);

        logger.info(i18n.translate(`_TASK_ADD_SUCCESS_`));

    }else{
        logger.info(i18n.translate(`_NO_TASK_`), `danger`);
    }
}


// List all Tasks
if(tasker.list) {

    let logger = new Logger("createTask");

    let today = moment(Date.now()).format("LL"),
        // title = today + i18n.translate(`_LIST_TASKS_`),
        header = Array(today.length+5).join(`=`);
    console.log(chalk.blue(`${header}\n| ${today} |\n${header}\n`));

    if (fs.existsSync(file)) {
        // Load task from file
        let tasks = JSON.parse(fs.readFileSync(file, `utf8`));

        // Filter by tag
        if (tasker.list !== true) {
            tasks = _.filter(tasks, t => t.type === tasker.list);
        }

        // Show each task
        for (task of tasks) {
            item = chalk.red("\t- ");
            item += (task.id) ? chalk.gray(`${task.id.split("").slice(0,6).join("")}  `) : "";
            item += (task.type) ? chalk.blue.bold(`@${task.type}\t  `) : "";
            item += chalk.yellow(`${task.message}`);
            item += (task.timebox) ? chalk.blue(` [${task.timebox}]`) : "";
            item += (task.date) ? chalk.magenta(` (${
                (task.date == today) ?
                chalk.red(i18n.translate(`_TODAY_`)) :
                task.date
            })`) : "";

            console.log(item);

        }
        console.log("\n");
    }else
        console.log(i18n.translate(`_FILE_NOT_EXISTS_`))
}


// Complete task
if(tasker.done) {

    let logger = new Logger("doneTask");

    if (tasker.done == true) {
        console.log(i18n.translate(`_MISSING_ID_`, `danger`));
        return;
    }

    // If file exists, load file.
    let tasks,
        task_id = tasker.done;
    if(fs.existsSync(file)) {
        tasks = JSON.parse(fs.readFileSync(file, `utf8`));
    }else{
        console.log(i18n.translate(`_FILE_NOT_EXISTS_`), `danger`);
        return;
    }

    let taskDone =      _.find(tasks, v => v.id.split("").slice(0,6).join("") === task_id),
        tasksChanged =  _.filter(tasks, v => v.id.split("").slice(0,6).join("") !== task_id);

    if (taskDone) {
        // Write on file
        fs.writeFile(file, JSON.stringify(tasksChanged, undefined, 4), console.log);

        // Write on fileDone
        let tasksDone = [];
        if(fs.existsSync(fileDone)) {
            tasksDone = JSON.parse(fs.readFileSync(fileDone, `utf8`))
        }
        tasksDone.push(taskDone);
        fs.writeFile(fileDone, JSON.stringify(tasksDone, undefined, 4), console.log);
    }else{
        logger.info(i18n.translate(`_TASK_NOT_FIND_`), `danger`);
        return;
    }


    logger.info(i18n.translate(`_TASK_DONE_`));

}
